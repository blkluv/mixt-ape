generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.VarChar(44)
  email     String?     @unique
  name      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  mints     Mint[]
  MintEmote MintEmote[]
  Points    Points[]
}

model TipLink {
  id          Int      @id @default(autoincrement())
  tipLink     String   @unique
  signature   String   @unique
  mintAddress String
  sender      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mint        Mint     @relation(fields: [mintAddress], references: [mintAddress])
}

model Mint {
  id          Int         @id @default(autoincrement())
  mintAddress String      @unique
  nftMetadata Json
  signature   String      @unique
  location    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  tipLinks    TipLink[]
  templateId  String
  nftTemplate NftTemplate @relation(fields: [templateId], references: [id])
  MintEmote   MintEmote[]
  Points      Points[]
}

model NftTemplate {
  id          String    @id @default(uuid())
  name        String
  runtime     Int
  price       Float
  image       String
  releaseDate DateTime
  endDate     DateTime?
  maxSupply   Int?
  status      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mints       Mint[]
}

model NftEmote {
  id          String      @id @default(uuid())
  name        String      @unique @db.VarChar(255)
  image       String
  cImage      String
  collection  String
  description String?
  symbol      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  MintEmote   MintEmote[]

  @@index([name])
}

model MintEmote {
  id          Int      @id @default(autoincrement())
  mintAddress String
  emoteId     String
  userId      String
  mint        Mint     @relation(fields: [mintAddress], references: [mintAddress])
  emote       NftEmote @relation(fields: [emoteId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Points {
  id          Int      @id @default(autoincrement())
  points      Int
  awardedId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  mintAddress String?
  mint        Mint?    @relation(fields: [mintAddress], references: [mintAddress])
}
